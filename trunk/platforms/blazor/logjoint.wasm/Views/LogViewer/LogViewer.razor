@namespace LogJoint.Wasm.UI.LogViewer
@using LogJoint
@using LogJoint.UI.Presenters.LogViewer
@using LogJoint.Settings
@implements IAsyncDisposable
@implements IView
@inject IJSRuntime jsRuntime
@inject JsInterop jsInterop

<div class="logview @Class" tabindex="0" @onkeydown="@(e => viewModel.OnKeyPressed(GetKey(e)))" @ref="element">
    <span class="measure-text" @ref="measureElement">&nbsp;</span>
    <div class="scroll-outer nice-scroll" @onwheel="@(e => viewModel.OnIncrementalVScroll((float)(e.DeltaY / charHeight)))" @ref="scrollOuter">
        <div class="scroll-inner" style="top: @TopProperty" @ref="scrollInner"
                @ongotpointercapture="@(e => { pointerCaptured = true; })" @onlostpointercapture="@(e => { pointerCaptured = false; })"
                @onpointermove="@(pointerCaptured ? HandleCapturedMove : null)">
            @foreach (var item in @viewModel.ViewLines)
            {
                <div class="logline"
                     @key="item.LineIndex"
                     style="background-color: @GetBackgroundColor(item.ContextColor)"
                     @onmousedown="@(e => viewModel.OnMessageMouseEvent(
                                                            item, GetClickedCharIndex(item, e),
                                                            GetMessageMouseEventFlags(e), null))">
                    @if (item.SelectedBackground.HasValue)
                    {
                        <span class="pad sel" style=@PadStyle(item.SelectedBackground.Value.Item1, item.SelectedBackground.Value.Item2)></span>
                    }
                    @if (item.SelectionHighlightingRanges != null)
                    {
                        @foreach (var r in item.SelectionHighlightingRanges)
                        {
                            <span class="pad selhl" style=@PadStyle(r.Item1, r.Item2)></span>
                        }
                    }
                    @if (item.SearchResultHighlightingRanges != null)
                    {
                        @foreach (var r in item.SearchResultHighlightingRanges)
                        {
                            <span class="pad srhl" style=@PadStyle(r.Item1, r.Item2)></span>
                        }
                    }
                    @if (item.CursorCharIndex.HasValue)
                    {
                        <span class="@(item.CursorVisible ? "pad cur" : "pad curhid")" style=@PadStyle(item.CursorCharIndex.Value, item.CursorCharIndex.Value)></span>
                    }
                    <span class="txt">@(item.TextLineValue.Length != 0 ? item.TextLineValue : " ")</span>
                    @if (item.HasMessageSeparator)
                    {
                        <div class="end-of-multiline-message"></div>
                    }
                </div>
            }
        </div>
    </div>
    <div class="outline" style="top: @TopProperty">
        @foreach (var item in @viewModel.ViewLines)
        {
            <div @key="item.LineIndex" class="item"
                 @onmousedown="@(e => viewModel.OnMessageMouseEvent(item, 0,
                                GetMessageMouseEventFlags(e) | MessageMouseEventFlag.OulineBoxesArea, null))">
                @{var f = viewModel.FocusedMessageMark; }
                @{var focusedMarkClass =
                            f == null ? "" :
                            f.Length == 1 ? (f[0] == item.LineIndex ? "f" : "") :
                            f[1] == item.LineIndex + 1 ? (f[0] != f[1] ? "fs" : "fs l") :
                            (f[0] == 0 && f[1] == 0 && item.LineIndex == 0) ? "fs r" :
                            "";}
                <span class="p @focusedMarkClass">@(" ")</span>
                @if (item.IsBookmarked)
                {
                    <span class="i b">@(" ")</span>
                }
                @if (item.Severity == SeverityIcon.Error)
                {
                    <span class="i e">@(" ")</span>
                }
                else if (item.Severity == SeverityIcon.Warning)
                {
                    <span class="i w">@(" ")</span>
                }
                @(" ")
            </div>
        }
    </div>
    <div class="vsroller"><div class="slider" @ref="sliderElement" style="top: @string.Format("{0}%", viewModel.VerticalScrollerPosition.GetValueOrDefault(0)*100)"></div></div>
</div>

@code {
    private IViewModel viewModel;
    private ISubscription subscription;
    private ElementReference measureElement, scrollOuter, sliderElement, element, scrollInner;
    private double charWidth = 1;
    private double charHeight = 1;
    private IAsyncDisposable resizeObserverHandle;
    private DotNetObjectReference<LogViewer> selfRef;
    private float displayLinesPerPage = 1;
    private bool pointerCaptured;

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public UI.LogViewer.ViewProxy ViewProxy { get; set; }

    protected override void OnInitialized()
    {
        selfRef = DotNetObjectReference.Create(this);

        ViewProxy.SetComponent(this);

        var updateLines = Updaters.Create(
            () => (viewModel.ViewLines, viewModel.FirstDisplayMessageScrolledLines, viewModel.FocusedMessageMark),
            _ => StateHasChanged()
        );

        subscription = viewModel.ChangeNotification.CreateSubscription(() =>
        {
            updateLines();
        });
    }

    public async ValueTask DisposeAsync()
    {
        ViewProxy.SetComponent(null);
        subscription?.Dispose();
        await resizeObserverHandle.DisposeAsync();
        selfRef?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            charWidth = await jsRuntime.InvokeAsync<double>("logjoint.getElementWidth", measureElement);
            charHeight = await jsRuntime.InvokeAsync<double>("logjoint.getElementHeight", measureElement);
            UpdateDisplayLinesPerPage();
            resizeObserverHandle = await jsInterop.Resize.ObserveResize(scrollOuter, () =>
            {
                UpdateDisplayLinesPerPage();
                viewModel?.ChangeNotification?.Post();
            });
            await jsRuntime.InvokeVoidAsync("logjoint.logViewer.initVScroller", sliderElement, selfRef);
            await jsInterop.Mouse.SetMouseCapturingHandler(scrollInner);
        }
    }

    float IView.DisplayLinesPerPage => displayLinesPerPage;

    bool IView.HasInputFocus => true;

    string[] IViewFonts.AvailablePreferredFamilies => new string[0];

    KeyValuePair<Appearance.LogFontSize, int>[] IViewFonts.FontSizes => new KeyValuePair<Appearance.LogFontSize, int>[0];

    object IView.GetContextMenuPopupData(int? viewLineIndex) => null;

    void IView.HScrollToSelectedText(int charIndex)
    {
        jsInterop.Scroll.ScrollLeftIntoView(scrollOuter, charWidth * charIndex);
    }

    void IView.PopupContextMenu(object contextMenuPopupData)
    {
    }

    async void IView.ReceiveInputFocus()
    {
        await element.FocusAsync();
    }

    void IView.SetViewModel(IViewModel value)
    {
        viewModel = value;
    }

    string PadStyle(int beginIdx, int endIdx)
    {
        return $"left: {beginIdx * charWidth}px; width: {(endIdx - beginIdx) * charWidth}px";
    }

    Key GetKey(KeyboardEventArgs keyboardEventArgs)
    {
        return GetMainKey(keyboardEventArgs) | GetModifierKeys(keyboardEventArgs);
    }

    Key GetModifierKeys(KeyboardEventArgs keyboardEventArgs)
    {
        var result = Key.None;
        if (keyboardEventArgs.ShiftKey)
        {
            result |= Key.ModifySelectionModifier;
        }
        if (keyboardEventArgs.CtrlKey)
        {
            result |= Key.JumpOverWordsModifier;
        }
        return result;
    }

    Key GetMainKey(KeyboardEventArgs keyboardEventArgs)
    {
        var ctrlOrCommand = keyboardEventArgs.CtrlKey || keyboardEventArgs.MetaKey;
        switch (keyboardEventArgs.Key)
        {
            case "ArrowUp":
                return ctrlOrCommand ? Key.BeginOfDocument : Key.Up;
            case "ArrowDown":
                return ctrlOrCommand ? Key.EndOfDocument : Key.Down;
            case "ArrowLeft":
                return keyboardEventArgs.MetaKey ? Key.BeginOfLine : Key.Left;
            case "ArrowRight":
                return keyboardEventArgs.MetaKey ? Key.EndOfLine : Key.Right;
            case "Home":
                return ctrlOrCommand ? Key.BeginOfDocument : Key.BeginOfLine;
            case "End":
                return ctrlOrCommand ? Key.EndOfDocument : Key.EndOfLine;
            case "PageUp": return Key.PageUp;
            case "PageDown": return Key.PageDown;
            case "B": return Key.BookmarkShortcut;
            case "b": return Key.BookmarkShortcut;
            case "c":
            case "C":
                return ctrlOrCommand ? Key.Copy : Key.None;
            default: return Key.None;
        }
    }

    LogJoint.UI.Presenters.LogViewer.MessageMouseEventFlag GetMessageMouseEventFlags(MouseEventArgs mouseEventArgs)
    {
        var result = MessageMouseEventFlag.None;
        if (mouseEventArgs.Detail > 1)
            result |= MessageMouseEventFlag.DblClick;
        else
            result |= MessageMouseEventFlag.SingleClick;
        if (mouseEventArgs.ShiftKey)
            result |= MessageMouseEventFlag.ShiftIsHeld;
        if (mouseEventArgs.AltKey)
            result |= MessageMouseEventFlag.AltIsHeld;
        if (mouseEventArgs.CtrlKey)
            result |= MessageMouseEventFlag.CtrlIsHeld;
        return result;
    }

    int GetClickedCharIndex(LogJoint.UI.Presenters.LogViewer.ViewLine viewLine, MouseEventArgs mouseEventArgs)
    {
        var clickedChar = (int)Math.Round(mouseEventArgs.OffsetX / charWidth);
        return clickedChar;
    }

    static string GetBackgroundColor(LogJoint.Drawing.Color? contextColor)
    {
        return contextColor.HasValue ? LogJoint.Drawing.ColorExtensions.ToHtmlColor(contextColor.Value) : "white";
    }

    void UpdateDisplayLinesPerPage()
    {
        var height = ((IJSInProcessRuntime)jsRuntime).Invoke<double>("logjoint.getElementHeight", scrollOuter);
        displayLinesPerPage = (float)(height / charHeight);
    }

    [JSInvokable]
    public void OnVScroll(double value)
    {
        viewModel?.OnVScroll(Math.Clamp(value, 0, 1), true);
    }

    string TopProperty => string.Format("{0:000}px", -viewModel.FirstDisplayMessageScrolledLines * charHeight);

    void HandleCapturedMove(MouseEventArgs e)
    {
        var lineIndex = (int)Math.Round(e.OffsetY / charHeight);
        if (lineIndex >= 0 && lineIndex < viewModel.ViewLines.Length)
        {
            var line = viewModel.ViewLines[lineIndex];
            viewModel.OnMessageMouseEvent(line, GetClickedCharIndex(line, e),
                MessageMouseEventFlag.ShiftIsHeld | MessageMouseEventFlag.CapturedMouseMove, null);
        }
    }
}
