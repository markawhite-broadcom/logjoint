@namespace LogJoint.Wasm.UI
@inject JsInterop jsInterop
@inject LogJoint.Wasm.ViewModelObjects viewProxies
@using LogJoint.UI.Presenters.ToolsContainer
@implements IDisposable

<div class='@(viewModel.IsVisible ? ResizerClass : CollapsedResizerClass)' @ref="toolsResizerElement"
     @onclick="viewModel.OnShowButtonClicked" title="@(viewModel.IsVisible ? viewModel.ResizerTooltip : viewModel.ShowButtonTooltip)"></div>
<div class='tool-container @Class' @ref='toolsElement' style="@GetStyle()">
    @if (viewModel.IsVisible)
    {
        <div class='header'>
            <TabsView SelectedTab="@viewModel.SelectedToolIndex" OnSelect="viewModel.OnSelectTool" Tabs="@tabNames()" />
            <div class='actions'>
                <button class='tool-button' @onclick="viewModel.OnHideButtonClicked" title="@viewModel.HideButtonTooltip">&gt;</button>
            </div>
        </div>
        @switch (viewModel.AvailableTools[viewModel.SelectedToolIndex].Kind)
        {
            case ToolKind.StateInspector:
                <LogJoint.Wasm.UI.Postprocessing.StateInspector Class='body' />
                break;
            case ToolKind.MessageProperties:
                <MessageProperties Class='body' />
                break;
            case ToolKind.SequenceDiagram:
                <LogJoint.Wasm.UI.Postprocessing.SequenceDiagram Class='body' />
                break;
        }
    }
</div>

@code {
    private ElementReference toolsResizerElement, toolsElement;
    private IViewModel viewModel => viewProxies.PresentationObjects.ViewModels.ToolsContainer;
    private ISubscription subscription;
    private IDisposable resizeHandler;
    private Func<IReadOnlyList<string>> tabNames;

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public string ResizerClass { get; set; } = "";

    [Parameter]
    public string CollapsedResizerClass { get; set; } = "";

    string GetStyle() =>
        !viewModel.IsVisible ? "display: none" :
        viewModel.Size.HasValue ? $"width: {viewModel.Size}px" :
        "";

    protected override void OnInitialized()
    {
        tabNames = Selectors.Create(() => viewModel.AvailableTools, tabs => tabs.Select(t => t.Name).ToArray());
        subscription = viewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => (viewModel.IsVisible, viewModel.SelectedToolIndex, viewModel.Size),
            _ => StateHasChanged()
        ));
    }

    public void Dispose()
    {
        subscription?.Dispose();
        resizeHandler?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            resizeHandler = await jsInterop.Resize.AddResizeHandler(toolsResizerElement, toolsElement,
                ResizeInterop.Direction.Horizonal, inverse: true, relativeToParent: false, handler: viewModel.OnResize);
        }
    }
}
