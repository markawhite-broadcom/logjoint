@namespace LogJoint.Wasm.UI
@inject IJSRuntime jsRuntime;

<div class='@ResizerClass' @ref="toolsResizerElement"></div>
<div class='tool-container @Class' @ref='toolsElement'>
    <div class='header'>
        <TabsView SelectedTab="@selectedTool" OnSelect="i => SetSelectedTool(i)" Tabs="@tabs" />
        <div class='actions'>
            <button class='tool-button' @onclick="HideTools">&gt;</button>
        </div>
    </div>
    @switch (visibleTools[selectedTool])
    {
        case ToolKind.StateInspector:
            <LogJoint.Wasm.UI.Postprocessing.StateInspector Class='body' />
            break;
        case ToolKind.MessageProperties:
            <MessageProperties Class='body' />
            break;
        case ToolKind.SequenceDiagram:
            <LogJoint.Wasm.UI.Postprocessing.SequenceDiagram Class='body' />
            break;
    }
</div>

@code {
    private ElementReference toolsResizerElement, toolsElement;
    enum ToolKind
    {
        None,
        StateInspector,
        MessageProperties,
        SequenceDiagram
    }
    private List<ToolKind> visibleTools = new List<ToolKind>
        {ToolKind.StateInspector, ToolKind.MessageProperties};
    private int selectedTool = 0;
    private static string[] tabs = new[] { "StateInspector", "Message details" };

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public string ResizerClass { get; set; } = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await jsRuntime.InvokeVoidAsync("logjoint.resize.initEWResizer",
            toolsResizerElement, toolsElement, /*inverse=*/true);
    }

    private async void HideTools()
    {
        await jsRuntime.InvokeVoidAsync("logjoint.setElementWidth", toolsElement, 0);
    }

    private void SetSelectedTool(int tool)
    {
        selectedTool = tool;
        StateHasChanged();
    }
}
