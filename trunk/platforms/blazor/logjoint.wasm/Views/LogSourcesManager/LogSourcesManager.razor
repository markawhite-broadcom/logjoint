@namespace LogJoint.Wasm.UI
@using LogJoint
@using LogJoint.UI.Presenters.SourcesManager
@using LogJoint.Settings
@implements IDisposable
@implements IView
@inject LogJoint.Wasm.ViewModelObjects viewProxies
@inject LogJoint.ModelObjects model

<div class='log-sources-manager @Class'>
    <div class='actions'>
        <button @onclick="OnAddLogSource">+</button>
        <button disabled="@(!viewModel.DeleteSelectedSourcesButtonEnabled)"
                @onclick="@viewModel.OnDeleteSelectedLogSourcesButtonClicked">-</button>
        <button disabled="@(!viewModel.PropertiesButtonEnabled)"
                @onclick="@viewModel.OnPropertiesButtonClicked">⚙</button>
        <button @onclick="@viewModel.OnShowHistoryDialogButtonClicked">R</button>
    </div>
    <LogSourcesList Class="the-list"/>
</div>

@code {
    private IViewModel viewModel;
    private ISubscription subscription;

    [Parameter]
    public string Class { get; set; } = "";

    protected override void OnInitialized()
    {
        viewProxies.SourcesManagerViewProxy.SetComponent(this);

        subscription = viewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => (viewModel.DeleteSelectedSourcesButtonEnabled),
            _ => StateHasChanged()
        ));
    }

    public void Dispose()
    {
        viewProxies.SourcesManagerViewProxy.SetComponent(null);
        subscription?.Dispose();
    }

    void IView.SetViewModel(IViewModel value)
    {
        viewModel = value;
    }

    void IView.ShowMRUMenu(List<MRUMenuItem> items)
    {
        // todo
    }

    async Task OnAddLogSource()
    {
        var fs = (LogJoint.Wasm.IWasmFileSystemConfig)model.FileSystem;
        var fileName = await fs.ChooseFile();
        Console.WriteLine("Virtual file name : {0}", fileName);
        var factory = (IFileBasedLogProviderFactory)model.UserDefinedFormatsManager.Items.Single(f => f.FormatName == "Analog exported log");
        model.LogSourcesManager.Create(factory, factory.CreateParams(fileName));
    }
}