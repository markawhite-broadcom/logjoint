@namespace LogJoint.Wasm.UI
@using LogJoint
@using LogJoint.UI.Presenters.SourcesManager
@using LogJoint.Settings
@implements IDisposable
@inject LogJoint.UI.Presenters.PresentationObjects presentation
@inject LogJoint.ModelObjects model

<div class='log-sources-manager @Class'>
    <div class='actions'>
        <button @onclick="OnAddLogSource" title="Open log">+</button>
        <button disabled="@(!viewModel.DeleteSelectedSourcesButtonEnabled)"
                @onclick="@viewModel.OnDeleteSelectedLogSourcesButtonClicked" title="Close selected log">−</button>
        <button disabled="@(!viewModel.PropertiesButtonEnabled)"
                @onclick="@viewModel.OnPropertiesButtonClicked">⚙</button>
        <button @onclick="@viewModel.OnShowHistoryDialogButtonClicked" class="history-button" title="Re-open recent log">&nbsp;</button>
    </div>
    <LogSourcesList Class="the-list"/>
</div>

@code {
    private IViewModel viewModel => presentation.ViewModels.SourcesManager;
    private ISubscription subscription;

    [Parameter]
    public string Class { get; set; } = "";

    protected override void OnInitialized()
    {
        subscription = viewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => (viewModel.DeleteSelectedSourcesButtonEnabled, viewModel.PropertiesButtonEnabled),
            _ => StateHasChanged()
        ));
    }

    public void Dispose()
    {
        subscription?.Dispose();
    }

    async Task OnAddLogSource()
    {
        var fs = (LogJoint.Wasm.IWasmFileSystemConfig)model.FileSystem;
        string fileName;
        try
        {
            fileName = await fs.ChooseFile();
        }
        catch (Exception e)
        {
            if (e.Message.Contains("user aborted"))
                return;
            throw;
        }
        Console.WriteLine("Virtual file name : {0}", fileName);
        using (var keepAlive = model.FileSystem.OpenFile(fileName))
        {
            var task = model.LogSourcesPreprocessings.Preprocess(
                new[] { model.PreprocessingStepsFactory.CreateLocationTypeDetectionStep(
                    new LogJoint.Preprocessing.PreprocessingStepParams(fileName, displayName: System.IO.Path.GetFileName(fileName))) },
                "Processing file"
            );
            await task;
        }
    }
}