@namespace  LogJoint.Wasm.UI
@using LogJoint.UI.Presenters.SourcesList
@implements IDisposable
@implements IView
@inject LogJoint.Wasm.ViewModelObjects viewProxies

<TreeView class="@Class"
          Root="@viewModel.RootItem"
          OnSelect="@(nodes => viewModel.OnSelectionChange(nodes.OfType<IViewItem>().ToArray()))"
          OnExpand="@(node => viewModel.OnItemExpand((IViewItem)node))"
          OnCollapse="@(node => viewModel.OnItemCollapse((IViewItem)node))"
          NodeClass="log-sources-list-item">
    <NodeTemplate>
        @{var item = (IViewItem)context;}
        @if (item.Checked != null)
        {
            <input type="checkbox" checked="@item.Checked" @oninput="@(e => viewModel.OnItemCheck(item, e.Value is bool x && x))" />
        }
        <span>@item.ToString()</span>
    </NodeTemplate>
</TreeView>

@code {
    private IViewModel viewModel;
    private ISubscription subscription;

    [Parameter]
    public string Class { get; set; } = "";

    protected override void OnInitialized()
    {
        viewProxies.SourcesListViewProxy.SetComponent(this);

        subscription = viewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => viewModel.RootItem,
            _ => StateHasChanged()
        ));
    }

    public void Dispose()
    {
        viewProxies.SourcesListViewProxy.SetComponent(null);
        subscription?.Dispose();
    }

    void IView.SetViewModel(IViewModel value)
    {
        viewModel = value;
    }

    void IView.SetTopItem(IViewItem item)
    {
        // todo
    }
}
