@namespace LogJoint.Wasm.UI
@using LogJoint
@using LogJoint.UI.Presenters.QuickSearchTextBox
@implements IDisposable
@implements IView

<div class='quick-search-textbox @Class'>
    <input value="@viewModel.Text" @oninput="@(e => viewModel.OnChangeText(e.Value.ToString()))" @onkeydown="HandleKeyDown" @ref="InputRef"/>
    @if (viewModel.ClearTextIconVisible)
    {
        <button class="clear-button" @onclick="@viewModel.OnClearTextIconClicked">🗙</button>
    }
    @if (viewModel.SuggestionsListAvailabile)
    {
        <button class="suggesions-button" @onclick="@viewModel.OnDropDownButtonClicked">@(viewModel.SuggestionsListVisibile ? "▴" : "▾")</button>
    }
</div>

@code {
    private IViewModel viewModel;
    private ISubscription subscription;
    [Inject]
    private IJSRuntime JSRuntime { get; set; }
    private ElementReference InputRef { get; set; }

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public QuickSearchTextBoxViewProxy ViewProxy { get; set; }

    protected override void OnInitialized()
    {
        ViewProxy.SetComponent(this);

        subscription = viewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => (viewModel.Text, viewModel.SuggestionsListAvailabile, viewModel.SuggestionsListVisibile, viewModel.ClearTextIconVisible),
            _ => StateHasChanged()
        ));
    }

    public void Dispose()
    {
        ViewProxy.SetComponent(null);
        subscription?.Dispose();
    }

    void IView.SetViewModel(IViewModel value)
    {
        viewModel = value;
    }

    void IView.ReceiveInputFocus()
    {
        // todo
    }

    void IView.SelectAll()
    {
        // todo
    }

    void IView.SelectEnd()
    {
        // todo
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("logjoint.addDefaultPreventingKeyHandler", InputRef, new string[] { "ArrowUp", "ArrowDown" });
        }
    }

    void HandleKeyDown(KeyboardEventArgs e)
    {
        Key key =
            (e.Key == "Enter" && e.ShiftKey) ? Key.EnterWithReverseSearchModifier :
            e.Key == "Enter" ? Key.Enter :
            e.Key == "Escape" ? Key.Escape :
            (e.Key == "ArrowDown" && e.AltKey) ? Key.ShowListShortcut :
            (e.Key == "ArrowUp" && e.AltKey) ? Key.HideListShortcut :
            e.Key == "ArrowDown" ? Key.Down :
            e.Key == "ArrowUp" ? Key.Up :
            e.Key == "PageDown" ? Key.PgDown :
            e.Key == "PageUp" ? Key.PgUp :
            Key.None;
        if (key != Key.None)
        {
            viewModel.OnKeyDown(key);
        }
    }
}