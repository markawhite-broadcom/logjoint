@namespace LogJoint.Wasm.UI
@inject LogJoint.Wasm.ViewModelObjects viewProxies
@using LogJoint.UI.Presenters.MainForm; 

<div class='main-window-tabs @Class'>
    <TabsView SelectedTab="@ViewModel.ActiveTab" Tabs="@tabNames()" OnSelect="@(i => ViewModel.OnChangeTab(ViewModel.VisibleTabs[i].Id))" />
    @switch (ViewModel.VisibleTabs[ViewModel.ActiveTab].Id)
    {
        case TabIDs.Sources:
            <LogSourcesManager Class="tab-content" />
            break;
        case TabIDs.Bookmarks:
            <BookmarksList Class="tab-content" />
            break;
        case TabIDs.Search:
            <SearchPanel Class="tab-content"/>
            break;
        case TabIDs.Postprocessing:
            <PostprocessingTabPage Class="tab-content" />
            break;
        case TabIDs.Debug:
            <DebugTab Class="tab-content" />
            break;
    }
</div>

@code {
    private ISubscription subscription;
    private IViewModel ViewModel => viewProxies.PresentationObjects.ViewModels.MainForm;
    private Func<IReadOnlyList<string>> tabNames;

    [Parameter]
    public string Class { get; set; } = "";

    protected override void OnInitialized()
    {
        tabNames = Selectors.Create(() => ViewModel.VisibleTabs, tabs => tabs.Select(t => t.Caption).ToArray());
        subscription = ViewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => (ViewModel.VisibleTabs, ViewModel.ActiveTab),
            _ => StateHasChanged()
        ));
    }

    public void Dispose()
    {
        subscription?.Dispose();
    }

}
