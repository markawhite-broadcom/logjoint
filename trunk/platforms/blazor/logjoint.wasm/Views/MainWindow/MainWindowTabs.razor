@namespace LogJoint.Wasm.UI
@using LogJoint.UI.Presenters.MainForm;
@inject JsInterop jsInterop
@inject LogJoint.UI.Presenters.PresentationObjects presentation

<div class='main-window-tabs @Class' @ref="tabsElement" style="@GetStyle()">
    <TabsView SelectedTab="@ViewModel.ActiveTab" Tabs="@tabNames()" OnSelect="@(i => ViewModel.OnChangeTab(ViewModel.VisibleTabs[i].Id))" />
    @switch (ViewModel.VisibleTabs[ViewModel.ActiveTab].Id)
    {
        case TabIDs.Sources:
            <LogSourcesManager Class="tab-content" />
            break;
        case TabIDs.Bookmarks:
            <BookmarksList Class="tab-content" />
            break;
        case TabIDs.Search:
            <SearchPanel Class="tab-content" />
            break;
        case TabIDs.Postprocessing:
            <PostprocessingTabPage Class="tab-content" />
            break;
        case TabIDs.Debug:
            <DebugTab Class="tab-content" />
            break;
    }
</div>
<div class='@ResizerClass' @ref="resizerElement" title="@ViewModel.ResizerTooltip"></div>

@code {
    private ISubscription subscription;
    private IViewModel ViewModel => presentation.ViewModels.MainForm;
    private Func<IReadOnlyList<TabsView.TabInfo>> tabNames;
    private ElementReference resizerElement, tabsElement;
    private IDisposable resizeHandler;

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public string ResizerClass { get; set; } = "";

    protected override void OnInitialized()
    {
        tabNames = Selectors.Create(() => ViewModel.VisibleTabs, tabs => tabs.Select(t => new TabsView.TabInfo
        {
            Caption = t.Id == TabIDs.Debug ? "⚙" : t.Caption,
            Class = t.Id == TabIDs.Debug ? "debug" : null
        }).ToArray());
        subscription = ViewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => (ViewModel.VisibleTabs, ViewModel.ActiveTab, ViewModel.Size),
            _ => StateHasChanged()
        ));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            resizeHandler = await jsInterop.Resize.InitResizer(resizerElement, tabsElement,
                ResizeInterop.Direction.Vertical, inverse: false, relativeToParent: true, handler: ViewModel.OnResizing);
        }
    }

    public void Dispose()
    {
        subscription?.Dispose();
        resizeHandler?.Dispose();
    }

    string GetStyle() => ViewModel.Size.HasValue ? $"height: {100 * ViewModel.Size}%" : "";
}
