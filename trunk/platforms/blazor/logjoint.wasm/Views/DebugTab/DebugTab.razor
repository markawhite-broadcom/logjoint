@namespace LogJoint.Wasm.UI
@inject IJSRuntime jsRuntime;
@inject LogJoint.ModelObjects model;
@inject TraceListener traceListener;
@inject JsInterop jsInterop;

<div class='@Class'>
    <a href="https://github.com/sergey-su/logjoint">github</a>
    <button @onclick="DownloadDebugLog">Download debug log</button>
    <input type="file" @ref="fileInputReference" hidden />
    <button @onclick="LoadByUrl" hidden>Load by blob URL</button>
    <button @onclick="LoadChromeDebugLog" hidden>Load Stream as Chrome debug log</button>
    <button @onclick="LoadUnspecifiedStream" hidden>Load unspecified stream</button>
    <button @onclick="TestLogFs" hidden>Test log fs</button>
</div>

@code {
    [Parameter]
    public string Class { get; set; } = "";

    ElementReference fileInputReference;

    async void LoadByUrl()
    {
        var url = await jsRuntime.InvokeAsync<string>("logjoint.files.getUrl", fileInputReference);
        Console.WriteLine("Blob url: {0}", url);
        var task = model.LogSourcesPreprocessings.Preprocess(
            new[] { model.PreprocessingStepsFactory.CreateLocationTypeDetectionStep(new LogJoint.Preprocessing.PreprocessingStepParams(url)) },
            "Processing blob URL test"
        );
    }

    async void LoadChromeDebugLog()
    {
        var fs = (LogJoint.Wasm.IWasmFileSystemConfig)model.FileSystem;
        var fileName = await fs.AddFileFromInput(fileInputReference);
        Console.WriteLine("Virtual file name : {0}", fileName);
        var factory = (IFileBasedLogProviderFactory)model.UserDefinedFormatsManager.Items.Single(f => f.FormatName == "Chrome debug log");
        model.LogSourcesManager.Create(factory, factory.CreateParams(fileName));
    }

    async void LoadUnspecifiedStream()
    {
        var fs = (LogJoint.Wasm.IWasmFileSystemConfig)model.FileSystem;
        var fileName = await fs.AddFileFromInput(fileInputReference);
        Console.WriteLine("Virtual file name : {0}", fileName);
        using (var keepAlive = model.FileSystem.OpenFile(fileName))
        {
            var task = model.LogSourcesPreprocessings.Preprocess(
                new[] { model.PreprocessingStepsFactory.CreateLocationTypeDetectionStep(new LogJoint.Preprocessing.PreprocessingStepParams(fileName)) },
                "Processing Unspecified file"
            );
            await task;
        }
    }

    async void DownloadDebugLog()
    {
        var entries = traceListener.ClearMemBufferAndGetCurrentEntries();
        using (var writer = new System.IO.StringWriter())
        {
            entries.ForEach(e => e.Write(writer));
            await jsInterop.SaveAs.SaveAs(writer.ToString(), string.Format(@"wasm-debug-{0:yyyy-MM-ddTHH-mm-ss}.log", DateTime.Now));
        }
    }

    async Task TestLogFs()
    {
        var fs = (LogJoint.Wasm.IWasmFileSystemConfig)model.FileSystem;
        var fileName = await fs.AddFileFromInput(fileInputReference);
        using (var stream = await model.FileSystem.OpenFile(fileName))
        {
            byte[] buf = new byte[1024];
            var read = await stream.ReadAsync(buf, 0, buf.Length);
            var hash = LogJoint.Hashing.GetStableHashCode(buf);
            Console.WriteLine("{0} {1}", read, hash);
        }
    }
}
