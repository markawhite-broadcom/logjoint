@using LogJoint.UI.Presenters.Postprocessing.StateInspectorVisualizer
@namespace LogJoint.Wasm.UI.Postprocessing
@inject JsInterop jsInterop

<div class='properties @Class'>
    <div class="toolbar">Properties:</div>
    <ListView Class="the-list"
              Items="@Items"
              OnSelect="@(items => ViewModel.OnSelectProperty(items.OfType<IPropertyListItem>().FirstOrDefault()))"
              OnDoubleClick="@(item => ViewModel.OnPropertyDoubleClicked(item as IPropertyListItem))"
              ChangeNotification="ViewModel.ChangeNotification"
              OnKeyDown="HandleKeyDown">
        <ItemTemplate>
            @{var item = (IPropertyListItem)context;}
            <div>@item.Name</div>
            <div>
                @if (@item.IsLink)
                {
                    <a @onclick:preventDefault @onclick="@(e => ViewModel.OnPropertyCellClicked(item))" href="#">@item.Value</a>
                }
                else
                {
                    @item.Value
                }
            </div>
        </ItemTemplate>
    </ListView>
</div>

@code {
    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public IViewModel ViewModel { get; set; }

    [Parameter]
    public IReadOnlyList<IPropertyListItem> Items { get; set; }

    void HandleKeyDown(KeyboardEventArgs eventArgs, LogJoint.UI.Presenters.Reactive.IListItem item)
    {
        if (eventArgs.Key.ToLower() == "c" && jsInterop.Browser.HasEditKey(eventArgs))
        {
            ViewModel.OnPropertyCellCopyShortcutPressed();
        }
        if (eventArgs.Key == "Enter")
        {
            ViewModel.OnPropertyDoubleClicked(item as IPropertyListItem);
        }
    }
}
