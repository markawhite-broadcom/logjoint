@namespace LogJoint.Wasm.UI.Postprocessing
@inject JsInterop jsInterop
@inject LogJoint.Wasm.ViewModelObjects viewProxies
@using LogJoint.UI.Presenters.Postprocessing.StateInspectorVisualizer
@implements IDisposable
@implements IView

<div class="state-inspector @Class">
    <StateInspectorObjectsTree Class="left"
                               ObjectsTreeRoot="@viewModel.ObjectsTreeRoot"
                               PaintNode="@viewModel.PaintNode"
                               ViewModel="@viewModel" />
    <div class="v-resizer" @ref="verticalResizerElement"></div>
    <div class="right" @ref="rightContainer" style="@GetRightStyle()">
        <StateInspectorProperties Class="top"
                                  Items="@viewModel.PropertyItems"
                                  ViewModel="@viewModel"/>
        <StateInspectorHistory Class="bottom"
                               ResizerClass="h-resizer"
                               Size="@viewModel.HistorySize"
                               Items="@viewModel.ChangeHistoryItems"
                               IsItemBookmarked="@viewModel.IsChangeHistoryItemBookmarked"
                               FocusedMessagePositionInChangeHistory="@viewModel.FocusedMessagePositionInChangeHistory"
                               ViewModel="@viewModel"/>
    </div>
</div>

@code {
    private ElementReference verticalResizerElement, rightContainer;
    private IViewModel viewModel;
    private ISubscription subscription;
    private IDisposable resizeHandler;

    [Parameter]
    public string Class { get; set; } = "";

    string GetRightStyle() => viewModel.ObjectsTreeSize.HasValue ? $"width: {100*viewModel.ObjectsTreeSize.Value}%" : "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            resizeHandler = await jsInterop.Resize.AddResizeHandler(verticalResizerElement, rightContainer,
                ResizeInterop.Direction.Horizonal, inverse: true, relativeToParent: true, handler: viewModel.OnResizeObjectsTree);
        }
    }

    protected override void OnInitialized()
    {
        viewProxies.PostprocesssingStateInspectorViewProxy.SetComponent(this);

        viewProxies.PresentationObjects.ExpensibilityEntryPoint.Postprocessing.StateInspector.Show();
        viewModel.OnVisibleChanged(true);

        subscription = viewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => (viewModel.ObjectsTreeRoot, viewModel.PaintNode,
                viewModel.ChangeHistoryItems, viewModel.IsChangeHistoryItemBookmarked,
                viewModel.PropertyItems, viewModel.FocusedMessagePositionInChangeHistory, 
                viewModel.ObjectsTreeSize, viewModel.HistorySize),
            _ => StateHasChanged()
        ));
    }

    public void Dispose()
    {
        viewProxies.PostprocesssingStateInspectorViewProxy.SetComponent(null);
        subscription?.Dispose();
        resizeHandler?.Dispose();
    }

    void IView.ScrollStateHistoryItemIntoView(int itemIndex)
    {
        // todo
    }

    void IView.SetViewModel(IViewModel value)
    {
        viewModel = value;
    }

    void IView.Show()
    {
        // todo
    }
}
