@namespace LogJoint.Wasm.UI
@using LogJoint
@using LogJoint.UI.Presenters.MessagePropertiesDialog
@implements IDisposable
@inject LogJoint.Wasm.ViewModelObjects viewProxies
@inject JsInterop jsInterop

<div class="message-properties @Class">
    @{var d = viewModel.Data;}
    <div class="grid">
        <div>Time:</div>
        <div class="value">@d.TimeValue</div>

        <div>Log source:</div>
        <a class="value" href="@(d.SourceLinkEnabled ? "#" : "")" @onclick:preventDefault @onclick="@(e => viewModel.OnSourceLinkClicked())">@d.SourceLinkValue</a>

        <div>Bookmarked:</div>
        <div class="value">
            <span class="bookmark-status">@d.BookmarkedStatusText</span>
            <a href="@(d.BookmarkActionLinkEnabled ? "#" : "")" @onclick:preventDefault @onclick="@(e => viewModel.OnBookmarkActionClicked())">@d.BookmarkActionLinkText</a>
        </div>

        <div class="contents-label">Contents</div>
        <TabsView Tabs=@d.ContentViewModes SelectedTab=d.ContentViewModeIndex.GetValueOrDefault() OnSelect=viewModel.OnContentViewModeChange />
    </div>
    <InlineSearch ViewModel="@viewModel.InlineSearch" />
    <div class="contents" @ref="textRef" tabindex="0">
        @foreach (var segment in SplitTextByDisdjointRanges(d.TextValue, d.TextHighlights.Select(r => (r.Begin, r.End, r))))
        {
            <MessagePropertiesTextSegment class="@(segment.data == null ? "" : segment.data.IsPrimary ? "hl-primary" : "hl")"
                                          Text=@segment.segment IsPrimary="@(segment.data?.IsPrimary == true)" />
        }
    </div>
</div>

@code {
    private IDialogViewModel viewModel;
    private ISubscription subscription;
    private ElementReference textRef;
    private IDisposable keyHandler;

    [Parameter]
    public string Class { get; set; } = "";

    protected override void OnInitialized()
    {
        if (viewProxies.MessageProperties.ViewModel == null)
        {
            viewProxies.PresentationObjects.PresentersFacade.ShowMessageProperties();
        }
        viewModel = viewProxies.MessageProperties.ViewModel;

        subscription = viewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => viewModel.Data,
            _ => StateHasChanged()
        ));
    }

    public void Dispose()
    {
        subscription?.Dispose();
        keyHandler?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            keyHandler = await jsInterop.Keyboard.AddHandler(textRef, new KeyboardInterop.Options
            {
                PreventDefault = true,
                StopPropagation = true,
                Handler = async () =>
                {
                    var selection = await jsInterop.Selection.GetSelectionInElement(textRef);
                    viewModel.OnSearchShortcutPressed(selection);
                }
            }, "Edit+F/i");
        }
    }

    IEnumerable<(string segment, T data)> SplitTextByDisdjointRanges<T>(string text, IEnumerable<(int begin, int end, T data)> ranges)
    {
        int lastRangeEnd = 0;
        foreach (var r in ranges)
        {
            if (r.begin > lastRangeEnd)
                yield return (text.Substring(lastRangeEnd, r.begin - lastRangeEnd), default(T));
            yield return (text.Substring(r.begin, r.end - r.begin), r.data);
            lastRangeEnd = r.end;
        }
        if (lastRangeEnd < text.Length)
            yield return (text.Substring(lastRangeEnd, text.Length - lastRangeEnd), default(T));
    }
}