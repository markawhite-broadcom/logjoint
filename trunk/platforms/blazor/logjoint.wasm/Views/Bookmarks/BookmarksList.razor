@namespace LogJoint.Wasm.UI
@using LogJoint
@using LogJoint.UI.Presenters.BookmarksList
@implements IDisposable
@inject LogJoint.UI.Presenters.PresentationObjects presentation
@inject JsInterop jsInterop

<ListView Items="@viewModel.Items" OnSelect="@(items => viewModel.OnChangeSelection(items.OfType<IViewItem>()))" 
          Class="@ListClass" ItemClass="bookmarks-list-item"
          OnDoubleClick="@(items => viewModel.OnViewDoubleClicked())"
          ChangeNotification="@viewModel.ChangeNotification"
          OnKeyDown="HandleKeyDown">
    <ItemTemplate>
        @{var item = (IViewItem)context;}
        @{var f = viewModel.FocusedMessagePosition; }
        @{var focusedMarkClass =
                    f == null ? "" :
                    f.Item2 == item.Index + 1 ? (f.Item1 != f.Item2 ? "f" : "f l") :
                    (f.Item1 == 0 && f.Item2 == 0 && item.Index == 0) ? "f r" :
                    "";}
        <div>@(item.Delta ?? item.AltDelta)</div>
        <div class="icon"></div>
        <div class="p @focusedMarkClass"></div>
        @if (item.IsEnabled)
        {
            <a href="#" @onclick:preventDefault @onclick="@(e => viewModel.OnBookmarkLeftClicked(item))"
                style="@GetItemStyle(item)">@item.Text</a>
        }
        else
        {
            <a style="@GetItemStyle(item)" class="disabled">@item.Text</a>
        }
    </ItemTemplate>
</ListView>

@code {
    private IViewModel viewModel => presentation.ViewModels.BookmarksList;
    private ISubscription subscription;

    [Parameter]
    public string Class { get; set; } = "";

    protected override void OnInitialized()
    {
        subscription = viewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => (viewModel.Items, viewModel.FocusedMessagePosition),
            _ => StateHasChanged()
        ));
    }

    public void Dispose()
    {
        subscription?.Dispose();
    }

    string ListClass => $"bookmarks-list {Class}";

    void HandleKeyDown(KeyboardEventArgs eventArgs, LogJoint.UI.Presenters.Reactive.IListItem item)
    {
        if (eventArgs.Key == "Enter")
        {
            viewModel.OnEnterKeyPressed();
        }
        else if (eventArgs.Key.ToLower() == "c" && jsInterop.Browser.HasEditKey(eventArgs))
        {
            viewModel.OnCopyShortcutPressed();
        }
        else if (eventArgs.Key == "Delete" || eventArgs.Key == "Backspace")
        {
            viewModel.OnDeleteButtonPressed();
        }
        else if (eventArgs.Key.ToLower() == "a" && jsInterop.Browser.HasEditKey(eventArgs))
        {
            viewModel.OnSelectAllShortcutPressed();
        }
    }

    string GetItemStyle(IViewItem item)
    {
        var cl = item.IsSelected || !item.ContextColor.HasValue ? "inherit" :
                LogJoint.Drawing.ColorExtensions.ToHtmlColor(item.ContextColor.Value);
        if (viewModel.Theme == LogJoint.UI.Presenters.ColorThemeMode.Dark)
        {
            return $"color: {cl}";
        }
        else
        {
            return $"background-color: {cl}";
        }
    }
}