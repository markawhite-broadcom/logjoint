@namespace LogJoint.Wasm.UI
@using LogJoint.UI.Presenters.ToastNotificationPresenter
@implements IDisposable

<div class="toast-notification @(!ViewModel.Visible ? "hidden" : "")">
    @foreach (var item in ViewModel.Items)
    {
    <div class="item">
        <span class="contents">
            @foreach (var part in LogJoint.UI.Presenters.LinkLabelUtils.SplitLinkLabelString(@item.Contents))
            {
                @if (part.LinkData != null)
                {
                    <a href="#"
                       @onclick="@(e => ViewModel.OnItemActionClicked(item, part.LinkData))"
                       @onclick:preventDefault>@part.Text</a>
                }
                @if (part.LinkData == null)
                {
                    <span>@part.Text</span>
                }
            }
        </span>
        @if (item.Progress.HasValue)
        {
            <CircularProgress Value=@item.Progress.Value />
        }
        @if (item.IsSuppressable)
        {
            <button @onclick="@(e => ViewModel.OnItemSuppressButtonClicked(item))">x</button>
        }
    </div>
    }
</div>

@code { 
    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public IViewModel ViewModel { get; set; }

    private ISubscription subscription;

    protected override void OnInitialized()
    {
        subscription = ViewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => ViewModel.Visible, () => ViewModel.Items,
            (_1, _2) => StateHasChanged()
        ));
    }

    public void Dispose()
    {
        subscription?.Dispose();
    }
}
