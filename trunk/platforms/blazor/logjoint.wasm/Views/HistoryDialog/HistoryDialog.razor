@namespace LogJoint.Wasm.UI
@using LogJoint.UI.Presenters.HistoryDialog
@implements IDisposable
@inject LogJoint.Wasm.ViewModelObjects viewProxies
@implements IView

<Modal Visible="@viewModel.IsVisible" Class="resizable-dialog history-dialog" ClickOutside="@viewModel.OnCancelClicked" OnCancel="@viewModel.OnCancelClicked">
    <header>Recent logs</header>
    <QuickSearchTextBox ViewModel="@viewModel.QuickSearchTextBox" />
    <TreeView Root="@viewModel.RootViewItem" Class="the-tree" @ref="tree"
              ChangeNotification="@viewModel.ChangeNotification"
              OnExpand="@(n => viewModel.OnExpand((IViewItem)n))" OnCollapse="@(n => viewModel.OnCollapse((IViewItem)n))"
              OnSelect="@(nodes => viewModel.OnSelect(nodes.OfType<IViewItem>()))"
              OnKeyDown="HandleTreeKeyDown"
              OnDoubleClick="@(n => viewModel.OnDoubleClick())">
        <NodeTemplate>
            @{var item = (IViewItem)context;}
            <div class="item @GetItemClass(item.Type)" @ondblclick="@(e => viewModel.OnDoubleClick())" title="@item.Text">
                @item.Text
            </div>
        </NodeTemplate>
    </TreeView>
    <div class="buttons">
        <button @onclick="@(e => viewModel.OnOpenClicked())" disabled="@(!viewModel.OpenButtonEnabled)">Open selected</button>
        <button @onclick="@(e => viewModel.OnCancelClicked())">Cancel</button>
    </div>
</Modal>

@code {
    private IViewModel viewModel;
    private ISubscription subscription;
    private TreeView tree;

    protected override void OnInitialized()
    {
        viewProxies.HistoryDialog.SetComponent(this);

        subscription = viewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => (viewModel.IsVisible, viewModel.OpenButtonEnabled, viewModel.RootViewItem),
            _ => StateHasChanged()
        ));
    }

    public void Dispose()
    {
        viewProxies.HistoryDialog.SetComponent(null);
        subscription?.Dispose();
    }

    void IView.SetViewModel(IViewModel viewModel)
    {
        this.viewModel = viewModel;
    }

    string GetItemClass(ViewItemType t) => t switch
    {
        ViewItemType.Comment => "comment",
        ViewItemType.ItemsContainer => "container",
        ViewItemType.Leaf => "leaf",
        _ => ""
    };

    LogJoint.UI.Presenters.QuickSearchTextBox.IView IView.QuickSearchTextBox => null;

    async void IView.PutInputFocusToItemsList()
    {
        await tree.FocusAsync();
    }

    void HandleTreeKeyDown(KeyboardEventArgs eventArgs, LogJoint.UI.Presenters.Reactive.ITreeNode node)
    {
        if (eventArgs.Key == "Enter")
        {
            viewModel.OnOpenClicked();
        }
    }
}
