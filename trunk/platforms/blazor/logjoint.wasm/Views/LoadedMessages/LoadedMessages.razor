@namespace LogJoint.Wasm.UI.LoadedMessages
@using LogJoint
@using LogJoint.UI.Presenters.LoadedMessages
@using LogJoint.Settings
@implements IDisposable
@inject LogJoint.Wasm.ViewProxies viewProxies
@inject LogJoint.UI.Presenters.PresentationObjects presentation
@inject IJSRuntime jsRuntime

<div class='loaded-messages @Class'>
    <div class='toolbar'>
        @{var viewState = viewModel.ViewState;}
        @{var bookmarkState = viewState.ToggleBookmark;}
        <button class='bookmark' @onclick="@(viewModel.OnToggleBookmark)" hidden="@(!bookmarkState.Visible)" title="@bookmarkState.Tooltip"></button>
        @{var rawModeState = viewState.RawViewButton;}
        <label class="raw-view" title="@rawModeState.Tooltip" hidden="@(!rawModeState.Visible)">
            <input type="checkbox" checked="rawModeState.Checked" @onchange="@(e => viewModel.OnToggleRawView())"/>
            <span>raw log</span>
        </label>
        @{var coloringState = viewState.Coloring;}
        <span hidden="@(!coloringState.Visible)">
            coloring:
            <select @onchange="@(e => viewModel.OnColoringButtonClicked(Convert.ToInt32(e.Value)))">
                @foreach (var (idx, item) in @coloringState.Options.Select((opt, idx) => (idx, opt)))
                {
                    <option selected="@(idx == coloringState.Selected)" value="@idx" label="@item.Text" title="@item.Tooltip" />
                }
            </select>
        </span>
        @{var navProgress = viewState.NavigationProgressIndicator;}
        <span hidden="@(!navProgress.Visible)">
            Loading...
        </span>
    </div>
    <div class='viewer'>
        <LogJoint.Wasm.UI.LogViewer.LogViewer ViewModel="@viewModel.LogViewer" Class="viewer-grow" />
    </div>
</div>

@code {
    private IViewModel viewModel => presentation.ViewModels.LoadedMessages;
    private ISubscription subscription;

    [Parameter]
    public string Class { get; set; } = "";

    protected override void OnInitialized()
    {
        subscription = viewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => (viewModel.ViewState),
            _ => StateHasChanged()
        ));
    }

    public void Dispose()
    {
        subscription?.Dispose();
    }
}
