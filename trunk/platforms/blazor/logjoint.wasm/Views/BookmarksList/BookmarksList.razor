@namespace LogJoint.Wasm.UI
@using LogJoint
@using LogJoint.UI.Presenters.BookmarksList
@implements IDisposable
@implements IView
@inject LogJoint.Wasm.ViewModelObjects viewProxies

<ListView Items="@viewModel.Items" OnSelect="@(items => viewModel.OnChangeSelection(items.OfType<IViewItem>()))" 
          Class="@ListClass" ItemClass="bookmarks-list-item"
          OnDoubleClick="@(items => viewModel.OnViewDoubleClicked())"
          ChangeNotification="@viewModel.ChangeNotification">
    <ItemTemplate>
        @{var item = (IViewItem)context;}
        @{var f = viewModel.FocusedMessagePosition; }
        @{var focusedMarkClass =
                    f == null ? "" :
                    f.Item2 == item.Index + 1 ? (f.Item1 != f.Item2 ? "f" : "f l") :
                    (f.Item1 == 0 && f.Item2 == 0 && item.Index == 0) ? "f r" :
                    "";}
        <div>@(item.Delta ?? item.AltDelta)</div>
        <div class="icon"></div>
        <div class="p @focusedMarkClass"></div>
        <a href="#" @onclick:preventDefault @onclick="@(e => viewModel.OnBookmarkLeftClicked(item))">@item.Text</a>
    </ItemTemplate>
</ListView>

@code {
    private IViewModel viewModel;
    private ISubscription subscription;

    [Parameter]
    public string Class { get; set; } = "";

    protected override void OnInitialized()
    {
        viewProxies.BookmarksList.SetComponent(this);

        subscription = viewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => (viewModel.Items, viewModel.FocusedMessagePosition),
            _ => StateHasChanged()
        ));
    }

    public void Dispose()
    {
        viewProxies.BookmarksList.SetComponent(null);
        subscription?.Dispose();
    }

    void IView.SetViewModel(IViewModel value)
    {
        viewModel = value;
    }

    string ListClass => $"bookmarks-list {Class}";
}