@namespace LogJoint.Wasm.UI
@using LogJoint
@using LogJoint.UI.Presenters.SearchResult
@using ViewerP = LogJoint.UI.Presenters.LogViewer
@implements IDisposable
@implements IView
@inject LogJoint.Wasm.ViewProxies viewProxies
@inject JsInterop jsInterop
@inject LogJoint.UI.Presenters.PresentationObjects presentation

<div class='@(viewModel.IsSearchResultsVisible ? ResizerClass : CollapsedResizerClass)' @ref="resizerElement" @onclick="viewModel.OnOpenSearchResultsButtonClicked"
     title="@(viewModel.IsSearchResultsVisible ? viewModel.ResizerTooltip : viewModel.OpenSearchResultsButtonTooltip)"></div>
<div class='search-result @Class' @ref="resultsElement" style="@GetStyle()">
    <div class="toolbar">
        <button class="current-time" @onclick="@viewModel.OnFindCurrentTimeButtonClicked" title="@viewModel.FindCurrentTimeButtonTooltip"></button>
        <button class="bookmark" @onclick="@viewModel.OnToggleBookmarkButtonClicked" title="@viewModel.ToggleBookmarkButtonTooltip"></button>
            @{var result = viewModel.Items.FirstOrDefault();}
            @if (result != null)
            {
                <div class="result" style="background-size: @ProgressToBackgroundSize(result)">
                    @result.Text
                </div>
            }
        <div class="resizer" @ref="toolBarResizerElement">:::::::::</div>
        <button class="close tool-button" title="@viewModel.CloseSearchResultsButtonTooltip" @onclick="viewModel.OnCloseSearchResultsButtonClicked">
            <div>&gt;</div>
        </button>
    </div>
    @if (viewModel.IsSearchResultsVisible)
    {
        <div class="viewer">
            <LogJoint.Wasm.UI.LogViewer.LogViewer ViewModel="@presentation.ViewModels.SearchResult.LogViewer" Class="viewer-grow" />
        </div>
    }
</div>

@code {
    private IViewModel viewModel => presentation.ViewModels.SearchResult;
    private ISubscription subscription;
    private ElementReference resizerElement, resultsElement, toolBarResizerElement;
    private IDisposable resizeHandler1, resizeHandler2;

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public string ResizerClass { get; set; } = "";

    [Parameter]
    public string CollapsedResizerClass { get; set; } = "";

    string GetStyle() =>
        !viewModel.IsSearchResultsVisible ? "display: none" :
        viewModel.Size.HasValue ? $"height: {100*viewModel.Size}%" :
        "";

    protected override void OnInitialized()
    {
        subscription = viewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => (viewModel.Items, viewModel.Size, viewModel.IsSearchResultsVisible),
            _ => StateHasChanged()
        ));
    }

    public void Dispose()
    {
        subscription?.Dispose();
        resizeHandler1?.Dispose();
        resizeHandler2?.Dispose();
    }

    void IView.UpdateExpandedState(bool isExpandable, bool isExpanded, int preferredListHeightInRows, string expandButtonHint, string unexpandButtonHint)
    {
        // todo
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            resizeHandler1 = await jsInterop.Resize.InitResizer(resizerElement, resultsElement,
                ResizeInterop.Direction.Vertical, inverse: true, relativeToParent: true, handler: viewModel.OnResizing);
            resizeHandler2 = await jsInterop.Resize.InitResizer(toolBarResizerElement, resultsElement,
                ResizeInterop.Direction.Vertical, inverse: true, relativeToParent: true, handler: viewModel.OnResizing);
        }
    }

    static string ProgressToBackgroundSize(ViewItem result)
    {
        return result.ProgressVisible ? $"{result.ProgressValue:0.00}%" : "0px";
    }
}