@namespace LogJoint.Wasm.UI
@using LogJoint
@using LogJoint.UI.Presenters.SearchResult
@using ViewerP = LogJoint.UI.Presenters.LogViewer
@implements IDisposable
@inject LogJoint.Wasm.ViewProxies viewProxies
@inject JsInterop jsInterop
@inject LogJoint.UI.Presenters.PresentationObjects presentation

<div class='@(viewModel.IsSearchResultsVisible ? ResizerClass : CollapsedResizerClass)' @ref="resizerElement" @onclick="viewModel.OnOpenSearchResultsButtonClicked"
     title="@(viewModel.IsSearchResultsVisible ? viewModel.ResizerTooltip : viewModel.OpenSearchResultsButtonTooltip)"></div>
<div class='search-result @Class' @ref="resultsElement" style="@GetStyle()">
    <div class="toolbar">
        <button class="current-time" @onclick="@viewModel.OnFindCurrentTimeButtonClicked" title="@viewModel.FindCurrentTimeButtonTooltip">
            <FindCurrentMessageIcon />
        </button>
        @{ var resultsListOpen = viewModel.ExpansionState.IsExpanded; }
        <button class="bookmark" @onclick="@viewModel.OnToggleBookmarkButtonClicked" title="@viewModel.ToggleBookmarkButtonTooltip"></button>
        <div class="resizer" @ref="toolBarResizerElement">:::::::::</div>
        <button class="close tool-button" title="@viewModel.CloseSearchResultsButtonTooltip" @onclick="viewModel.OnCloseSearchResultsButtonClicked">
            <div>&gt;</div>
        </button>
    </div>
    <div class="result @(resultsListOpen ? "open" : "closed")" @onfocusout=@HandleFocusOut>
        <ListView Items="@allItemsOrFirst()" Class="list" ItemClass="item" ChangeNotification="@viewModel.ChangeNotification" @ref="ListRef">
            <ItemTemplate>
                @{var item = (ViewItem)context;}
                @{var expansionState = viewModel.ExpansionState;}
                @if (item.IsPrimary)
                {
                    if (expansionState.IsExpandable)
                    {
                        <button class="expand-btn-sizes expand-btn"
                                @onclick="@(e => viewModel.OnExpandSearchesListClicked())"
                                title="@(expansionState.IsExpanded ? expansionState.UnexpandButtonHint : expansionState.ExpandButtonHint)">
                            @if (expansionState.IsExpanded)
                            {
                                <CollapseContentIcon />
                            }
                            else
                            {
                                <ExpandContentIcon />
                            }
                        </button>
                    }
                }
                else
                {
                    <div class="expand-btn-sizes"></div>
                }
                <input type="checkbox"
                        checked=@item.VisiblityControlChecked
                        @onchange="@(e => viewModel.OnVisibilityCheckboxClicked(item))"
                        title=@item.VisiblityControlHint />
                <div class="text" style="background-size: @ProgressToBackgroundSize(item)">@item.Text</div>
                @if (expansionState.IsExpanded)
                {
                    <button class="pin @(item.PinControlChecked ? "pinned" : "")" 
                            @onclick="@(e => viewModel.OnPinCheckboxClicked(item))"
                            title=@item.PinControlHint>
                        @if (item.PinControlChecked)
                        {
                            <PinIcon />
                        }
                        else
                        {
                            <TiltedPinIcon />
                        }
                    </button>
                }
            </ItemTemplate>
        </ListView>
    </div>
    @if (viewModel.IsSearchResultsVisible)
    {
        <div class="viewer">
            <LogJoint.Wasm.UI.LogViewer.LogViewer ViewModel="@presentation.ViewModels.SearchResult.LogViewer" Class="viewer-grow" />
        </div>
    }
</div>

@code {
    private IViewModel viewModel => presentation.ViewModels.SearchResult;
    private ISubscription subscription;
    private ElementReference resizerElement, resultsElement, toolBarResizerElement;
    private IDisposable resizeHandler1, resizeHandler2;
    private Func<IReadOnlyList<ViewItem>> allItemsOrFirst;
    private ListView ListRef { get; set; }

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public string ResizerClass { get; set; } = "";

    [Parameter]
    public string CollapsedResizerClass { get; set; } = "";

    string GetStyle() =>
        !viewModel.IsSearchResultsVisible ? "display: none" :
        viewModel.Size.HasValue ? $"height: {100*viewModel.Size}%" :
        "";

    protected override void OnInitialized()
    {
        allItemsOrFirst = Selectors.Create(() => viewModel.Items, () => viewModel.ExpansionState.IsExpanded, (items, expanded) =>
        {
            if (expanded)
                return items;
            else
                return items.Take(1).ToArray();
        });
        var maybeResetListScroll = Updaters.Create(() => viewModel.ExpansionState.IsExpanded, (expanded, wasExpanded) =>
        {
            if (wasExpanded && !expanded)
                jsInterop.Scroll.SetScrollTop(ListRef.ListRef, 0);
        });
        subscription = viewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => (viewModel.Items, viewModel.Size, viewModel.IsSearchResultsVisible, viewModel.ExpansionState),
            _ =>
            {
                StateHasChanged();
                maybeResetListScroll();
            }
        ));
    }

    public void Dispose()
    {
        subscription?.Dispose();
        resizeHandler1?.Dispose();
        resizeHandler2?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            resizeHandler1 = await jsInterop.Resize.InitResizer(resizerElement, resultsElement,
                ResizeInterop.Direction.Vertical, inverse: true, relativeToParent: true, handler: viewModel.OnResizing);
            resizeHandler2 = await jsInterop.Resize.InitResizer(toolBarResizerElement, resultsElement,
                ResizeInterop.Direction.Vertical, inverse: true, relativeToParent: true, handler: viewModel.OnResizing);
        }
    }

    static string ProgressToBackgroundSize(ViewItem result)
    {
        return result.ProgressVisible ? $"{result.ProgressValue*100d:0.00}%" : "0px";
    }

    async void HandleFocusOut()
    {
        await Task.Yield(); // skip one JS frame to let the new element be focused before checking if focus left this component.
        if (!await jsInterop.Keyboard.IsFocusWithin(ListRef.ListRef))
        {
            viewModel.OnDropdownContainerLostFocus();
        }
    }
}