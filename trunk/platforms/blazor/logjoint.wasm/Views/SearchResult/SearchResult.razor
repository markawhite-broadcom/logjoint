@namespace LogJoint.Wasm.UI
@using LogJoint
@using LogJoint.UI.Presenters.SearchResult
@using ViewerP = LogJoint.UI.Presenters.LogViewer
@implements IDisposable
@implements IView
@inject LogJoint.Wasm.ViewModelObjects viewProxies
@inject IJSRuntime jsRuntime

<div class='@ResizerClass' @ref="resizerElement"></div>
<div class='search-result @Class' @ref="resultsElement">
    <div class="toolbar">
        <button class="current-time">Curr</button>
        <button class="bookmark">Bmk</button>
            @{var result = viewModel.Items.FirstOrDefault();}
            @if (result != null)
            {
                <div class="result" style="background-size: @ProgressToBackgroundSize(result)">
                    @result.Text
                </div>
            }
        <div class="resizer" @ref="toolBarResizerElement">:::::::::</div>
        <button class="close">🗙</button>
    </div>
    <div class="viewer">
        <LogJoint.Wasm.UI.LogViewer.LogViewer ViewProxy="@viewProxies.SearchResultLogViewer" Class="viewer-grow" />
    </div>
</div>

@code {
    private IViewModel viewModel;
    private ISubscription subscription;
    private ElementReference resizerElement, resultsElement, toolBarResizerElement;

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public string ResizerClass { get; set; } = "";

    protected override void OnInitialized()
    {
        viewProxies.SearchResult.SetComponent(this);

        subscription = viewModel.ChangeNotification.CreateSubscription(Updaters.Create(
            () => (viewModel.Items),
            _ => StateHasChanged()
        ));
    }

    public void Dispose()
    {
        viewProxies.SearchResult.SetComponent(null);
        subscription?.Dispose();
    }

    void IView.SetViewModel(IViewModel value)
    {
        viewModel = value;
    }

    ViewerP.IView IView.MessagesView => null;

    void IView.UpdateExpandedState(bool isExpandable, bool isExpanded, int preferredListHeightInRows, string expandButtonHint, string unexpandButtonHint)
    {
        // todo
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await jsRuntime.InvokeVoidAsync("logjoint.resize.initNSResizer",
            resizerElement, resultsElement, /*inverse=*/true);
        await jsRuntime.InvokeVoidAsync("logjoint.resize.initNSResizer",
            toolBarResizerElement, resultsElement, /*inverse=*/true);
    }

    static string ProgressToBackgroundSize(ViewItem result)
    {
        return result.ProgressVisible ? $"{result.ProgressValue:0.00}%" : "0px";
    }
}